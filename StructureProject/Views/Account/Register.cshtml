@model StructureProject.Models.RegisterViewModel

@{
    ViewBag.Title = "Register";
}

<h2>@ViewBag.Title.</h2>

@using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{

    if(Model.Errors.Any())
    {
        foreach(var error in Model.Errors)
        {
            <ul style="color:red" class="alert alert-danger" role="alert">
                <li>
                    @error
                </li>
            </ul>

        }
    }
    @Html.AntiForgeryToken()
    <h4>Create a new account.</h4>
    <hr />
    <div class="form-group">
        @Html.LabelFor(m => m.Name, new { @class = "col-md-2 control-label"})
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })

        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.LastName, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.LastName, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })

        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Email, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })

        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.BirthDate, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBox("BirthDate", "", new { @class = "form-control" })
            @*@Html.TextBoxFor(m => m.BirthDate, "{0:d MMM yyyy}", new { @class = "form-control" })*@
            @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })

        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })

        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })

        </div>
    </div>

    @Html.HiddenFor(m => m.Role,new { @Value = "User" });

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" class="btn btn-default" value="Register" />
        </div>
    </div>
}

@section Scripts {
    <script>

    </script>

    @Scripts.Render("~/bundles/jqueryval")
<script>

    var a = moment().subtract(18, 'years').format('D/M/YYYY');
    //alert(a);

    $('#BirthDate').mouseenter(function () {
                $('#BirthDate').datetimepicker({

                    format: 'D/M/YYYY',
                    maxDate: a
                })
     });

     //   $('#BirthDate').focus(function () {
     //           $('#BirthDate').datetimepicker({

     //               format: 'D/M/YYYY',
     //               maxDate: a
     //           })
     //});


            $.validator.addMethod('date', function (value, element) {
              if (this.optional(element)) {
                return true;
              }
              var valid = true;
              return valid;
            });
    </script>
}
